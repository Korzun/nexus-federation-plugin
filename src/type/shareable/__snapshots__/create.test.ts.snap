// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shareable field configuration is NOT present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#shareable

      Indicates that an object type's field is allowed to be resolved
      by multiple subgraphs (by default in Federation 2, object
      fields can be resolved by only one subgraph).

      \`\`\`gql
      type Position {
        x: Int! @shareable
        y: Int! @shareable
      }
      \`\`\`

      If applied to an object type definition, all of that type's fields
      are considered \`@shareable\`:

      \`\`\`gql
      type Position @shareable {
        x: Int!
        y: Int!
      }
      \`\`\`

      If a field is marked \`@shareable\` in any subgraph, it must beo
      marked as either \`@shareable\` or \`@external\` in every Federation
      2 subgraph that defines it.

      If a Federation 2 supergraph includes a Federation 1 subgraph,
      all value types in the Federation 1 subgraph are automatically
      considered \`@shareable\` by the Federation 2 composition algorithm.
      
      If a field is included in an entity's \`@key\` directive, that
      field is automatically considered \`@shareable\` and the directive
      is not required in the corresponding subgraph(s).
    
\\"\\"\\"
directive @shareable on FIELD_DEFINITION | OBJECT

type Query {
  ok: Boolean!
}

type User {
  email: String
  id: ID
  name: String
}"
`;

exports[`shareable field configuration is NOT present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationShareableField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/field\\"
import type { FederationShareableObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    ok: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"shareable\\"

export interface NexusGenDirectiveArgs {
  shareable: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * Adding the shareable to an object is equivalent to marking each
     * field on the object shareable.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * shareable: true,
     * definition: (t) => {
     * t.string('name');  // shareable because User is marked shareable
     * t.string('email'); // shareable because User is marked shareable
     * },
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) =>
     * {
     * t.field('upc', { type: 'UPC' });              // shareable because upc is a key field
     * t.string('name');                             // non-shareable
     * t.string('description', { shareable: true }); // shareable
     * }
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`shareable field configuration is present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#shareable

      Indicates that an object type's field is allowed to be resolved
      by multiple subgraphs (by default in Federation 2, object
      fields can be resolved by only one subgraph).

      \`\`\`gql
      type Position {
        x: Int! @shareable
        y: Int! @shareable
      }
      \`\`\`

      If applied to an object type definition, all of that type's fields
      are considered \`@shareable\`:

      \`\`\`gql
      type Position @shareable {
        x: Int!
        y: Int!
      }
      \`\`\`

      If a field is marked \`@shareable\` in any subgraph, it must beo
      marked as either \`@shareable\` or \`@external\` in every Federation
      2 subgraph that defines it.

      If a Federation 2 supergraph includes a Federation 1 subgraph,
      all value types in the Federation 1 subgraph are automatically
      considered \`@shareable\` by the Federation 2 composition algorithm.
      
      If a field is included in an entity's \`@key\` directive, that
      field is automatically considered \`@shareable\` and the directive
      is not required in the corresponding subgraph(s).
    
\\"\\"\\"
directive @shareable on FIELD_DEFINITION | OBJECT

type Query {
  ok: Boolean!
}

type User {
  email: String
  id: ID
  name: String @shareable
}"
`;

exports[`shareable field configuration is present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationShareableField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/field\\"
import type { FederationShareableObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    ok: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"shareable\\"

export interface NexusGenDirectiveArgs {
  shareable: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * Adding the shareable to an object is equivalent to marking each
     * field on the object shareable.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * shareable: true,
     * definition: (t) => {
     * t.string('name');  // shareable because User is marked shareable
     * t.string('email'); // shareable because User is marked shareable
     * },
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) =>
     * {
     * t.field('upc', { type: 'UPC' });              // shareable because upc is a key field
     * t.string('name');                             // non-shareable
     * t.string('description', { shareable: true }); // shareable
     * }
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`shareable is correctly added to schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#shareable

      Indicates that an object type's field is allowed to be resolved
      by multiple subgraphs (by default in Federation 2, object
      fields can be resolved by only one subgraph).

      \`\`\`gql
      type Position {
        x: Int! @shareable
        y: Int! @shareable
      }
      \`\`\`

      If applied to an object type definition, all of that type's fields
      are considered \`@shareable\`:

      \`\`\`gql
      type Position @shareable {
        x: Int!
        y: Int!
      }
      \`\`\`

      If a field is marked \`@shareable\` in any subgraph, it must beo
      marked as either \`@shareable\` or \`@external\` in every Federation
      2 subgraph that defines it.

      If a Federation 2 supergraph includes a Federation 1 subgraph,
      all value types in the Federation 1 subgraph are automatically
      considered \`@shareable\` by the Federation 2 composition algorithm.
      
      If a field is included in an entity's \`@key\` directive, that
      field is automatically considered \`@shareable\` and the directive
      is not required in the corresponding subgraph(s).
    
\\"\\"\\"
directive @shareable on FIELD_DEFINITION | OBJECT

type Query {
  ok: Boolean!
}"
`;

exports[`shareable is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationShareableField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/field\\"
import type { FederationShareableObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    ok: boolean; // Boolean!
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    ok: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"shareable\\"

export interface NexusGenDirectiveArgs {
  shareable: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * Adding the shareable to an object is equivalent to marking each
     * field on the object shareable.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * shareable: true,
     * definition: (t) => {
     * t.string('name');  // shareable because User is marked shareable
     * t.string('email'); // shareable because User is marked shareable
     * },
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) =>
     * {
     * t.field('upc', { type: 'UPC' });              // shareable because upc is a key field
     * t.string('name');                             // non-shareable
     * t.string('description', { shareable: true }); // shareable
     * }
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`shareable object configuration is NOT present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#shareable

      Indicates that an object type's field is allowed to be resolved
      by multiple subgraphs (by default in Federation 2, object
      fields can be resolved by only one subgraph).

      \`\`\`gql
      type Position {
        x: Int! @shareable
        y: Int! @shareable
      }
      \`\`\`

      If applied to an object type definition, all of that type's fields
      are considered \`@shareable\`:

      \`\`\`gql
      type Position @shareable {
        x: Int!
        y: Int!
      }
      \`\`\`

      If a field is marked \`@shareable\` in any subgraph, it must beo
      marked as either \`@shareable\` or \`@external\` in every Federation
      2 subgraph that defines it.

      If a Federation 2 supergraph includes a Federation 1 subgraph,
      all value types in the Federation 1 subgraph are automatically
      considered \`@shareable\` by the Federation 2 composition algorithm.
      
      If a field is included in an entity's \`@key\` directive, that
      field is automatically considered \`@shareable\` and the directive
      is not required in the corresponding subgraph(s).
    
\\"\\"\\"
directive @shareable on FIELD_DEFINITION | OBJECT

type Query {
  ok: Boolean!
}

type User {
  email: String
  id: ID
  name: String
}"
`;

exports[`shareable object configuration is NOT present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationShareableField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/field\\"
import type { FederationShareableObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    ok: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"shareable\\"

export interface NexusGenDirectiveArgs {
  shareable: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * Adding the shareable to an object is equivalent to marking each
     * field on the object shareable.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * shareable: true,
     * definition: (t) => {
     * t.string('name');  // shareable because User is marked shareable
     * t.string('email'); // shareable because User is marked shareable
     * },
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) =>
     * {
     * t.field('upc', { type: 'UPC' });              // shareable because upc is a key field
     * t.string('name');                             // non-shareable
     * t.string('description', { shareable: true }); // shareable
     * }
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`shareable object configuration is present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#shareable

      Indicates that an object type's field is allowed to be resolved
      by multiple subgraphs (by default in Federation 2, object
      fields can be resolved by only one subgraph).

      \`\`\`gql
      type Position {
        x: Int! @shareable
        y: Int! @shareable
      }
      \`\`\`

      If applied to an object type definition, all of that type's fields
      are considered \`@shareable\`:

      \`\`\`gql
      type Position @shareable {
        x: Int!
        y: Int!
      }
      \`\`\`

      If a field is marked \`@shareable\` in any subgraph, it must beo
      marked as either \`@shareable\` or \`@external\` in every Federation
      2 subgraph that defines it.

      If a Federation 2 supergraph includes a Federation 1 subgraph,
      all value types in the Federation 1 subgraph are automatically
      considered \`@shareable\` by the Federation 2 composition algorithm.
      
      If a field is included in an entity's \`@key\` directive, that
      field is automatically considered \`@shareable\` and the directive
      is not required in the corresponding subgraph(s).
    
\\"\\"\\"
directive @shareable on FIELD_DEFINITION | OBJECT

type Query {
  ok: Boolean!
}

type User @shareable {
  email: String
  id: ID
  name: String
}"
`;

exports[`shareable object configuration is present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationShareableField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/field\\"
import type { FederationShareableObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/shareable/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    ok: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"shareable\\"

export interface NexusGenDirectiveArgs {
  shareable: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * Adding the shareable to an object is equivalent to marking each
     * field on the object shareable.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * shareable: true,
     * definition: (t) => {
     * t.string('name');  // shareable because User is marked shareable
     * t.string('email'); // shareable because User is marked shareable
     * },
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that every field on an object can be resolved
     * by multiple subgraphs. Any subgraph that includes a shareable
     * field can potentially resolve a query for that field. To successfully
     * compose, a field must have the same shareability mode (either
     * shareable or non-shareable) across all subgraphs.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) =>
     * {
     * t.field('upc', { type: 'UPC' });              // shareable because upc is a key field
     * t.string('name');                             // non-shareable
     * t.string('description', { shareable: true }); // shareable
     * }
     * });
     * \`\`\`
     * [Sharable - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#shareable)
     */
    shareable?: FederationShareableField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;
