// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`provides \`prefixFieldSet\` configured to \`false\` is added to schema with fields type as \`FieldSet\` 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @provides(fields: FieldSet!) on FIELD_DEFINITION

scalar FieldSet

type Query {
  test: Boolean
}"
`;

exports[`provides \`prefixFieldSet\` configured to \`false\` is added to types with fields type as \`FieldSet\` 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationProvidesField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/provides/field\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"provides\\"

export interface NexusGenDirectiveArgs {
  provides: {
    fields:NexusGenScalars['FieldSet']; // FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Annotates the expected returned fieldset from a field
     * on a base type that is guaranteed to be selectable by the
     * gateway. Given the following example:
     * \`\`\`ts
     * objectType({
     * name: 'Review',
     * keyFields: ['id'],
     * definition: (t) => {
     * t.field('product', { type: 'Product', provides: ['name'] });
     * },
     * });
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) => {
     * t.string('upc', { external: true });
     * t.string('name', { external: true });
     * },
     * });
     * \`\`\`
     * When fetching \`Review.product\` from the Reviews service,
     * it is possible to request the name with the expectation that
     * the Reviews service can provide it when going from review to
     * product. \`Product.name\` is an external field on an external
     * type which is why the local type extension of \`Product\` and
     * annotation of \`name\` is required.
     * [Provides - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federated-types/federated-directives#provides)
     */
    provides?: FederationProvidesField<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`provides \`prefixFieldSet\` configured to \`true\` is added to schema with fields type as \`_FieldSet\` 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

type Query {
  test: Boolean
}

scalar _FieldSet"
`;

exports[`provides \`prefixFieldSet\` configured to \`true\` is added to types with fields type as \`_FieldSet\` 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationProvidesField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/provides/field\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"provides\\"

export interface NexusGenDirectiveArgs {
  provides: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Annotates the expected returned fieldset from a field
     * on a base type that is guaranteed to be selectable by the
     * gateway. Given the following example:
     * \`\`\`ts
     * objectType({
     * name: 'Review',
     * keyFields: ['id'],
     * definition: (t) => {
     * t.field('product', { type: 'Product', provides: ['name'] });
     * },
     * });
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) => {
     * t.string('upc', { external: true });
     * t.string('name', { external: true });
     * },
     * });
     * \`\`\`
     * When fetching \`Review.product\` from the Reviews service,
     * it is possible to request the name with the expectation that
     * the Reviews service can provide it when going from review to
     * product. \`Product.name\` is an external field on an external
     * type which is why the local type extension of \`Product\` and
     * annotation of \`name\` is required.
     * [Provides - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federated-types/federated-directives#provides)
     */
    provides?: FederationProvidesField<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`provides default config is added to schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

type Query {
  test: Boolean
}

scalar _FieldSet"
`;

exports[`provides default config is added to types 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationProvidesField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/provides/field\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"provides\\"

export interface NexusGenDirectiveArgs {
  provides: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Annotates the expected returned fieldset from a field
     * on a base type that is guaranteed to be selectable by the
     * gateway. Given the following example:
     * \`\`\`ts
     * objectType({
     * name: 'Review',
     * keyFields: ['id'],
     * definition: (t) => {
     * t.field('product', { type: 'Product', provides: ['name'] });
     * },
     * });
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) => {
     * t.string('upc', { external: true });
     * t.string('name', { external: true });
     * },
     * });
     * \`\`\`
     * When fetching \`Review.product\` from the Reviews service,
     * it is possible to request the name with the expectation that
     * the Reviews service can provide it when going from review to
     * product. \`Product.name\` is an external field on an external
     * type which is why the local type extension of \`Product\` and
     * annotation of \`name\` is required.
     * [Provides - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federated-types/federated-directives#provides)
     */
    provides?: FederationProvidesField<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`provides field configuration is NOT present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

type Product {
  name: String
  upc: String
}

type Query {
  test: Boolean
}

type Review {
  product: Product
}

scalar _FieldSet"
`;

exports[`provides field configuration is NOT present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationProvidesField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/provides/field\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Product: { // root type
    name?: string | null; // String
    upc?: string | null; // String
  }
  Query: {};
  Review: { // root type
    product?: NexusGenRootTypes['Product'] | null; // Product
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Product: { // field return type
    name: string | null; // String
    upc: string | null; // String
  }
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  Review: { // field return type
    product: NexusGenRootTypes['Product'] | null; // Product
  }
}

export interface NexusGenFieldTypeNames {
  Product: { // field return type name
    name: 'String'
    upc: 'String'
  }
  Query: { // field return type name
    test: 'Boolean'
  }
  Review: { // field return type name
    product: 'Product'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"provides\\"

export interface NexusGenDirectiveArgs {
  provides: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Annotates the expected returned fieldset from a field
     * on a base type that is guaranteed to be selectable by the
     * gateway. Given the following example:
     * \`\`\`ts
     * objectType({
     * name: 'Review',
     * keyFields: ['id'],
     * definition: (t) => {
     * t.field('product', { type: 'Product', provides: ['name'] });
     * },
     * });
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) => {
     * t.string('upc', { external: true });
     * t.string('name', { external: true });
     * },
     * });
     * \`\`\`
     * When fetching \`Review.product\` from the Reviews service,
     * it is possible to request the name with the expectation that
     * the Reviews service can provide it when going from review to
     * product. \`Product.name\` is an external field on an external
     * type which is why the local type extension of \`Product\` and
     * annotation of \`name\` is required.
     * [Provides - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federated-types/federated-directives#provides)
     */
    provides?: FederationProvidesField<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`provides field configuration is present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

type Product {
  name: String
  upc: String
}

type Query {
  test: Boolean
}

type Review {
  product: Product @provides(fields: \\"name upc\\")
}

scalar _FieldSet"
`;

exports[`provides field configuration is present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationProvidesField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/provides/field\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Product: { // root type
    name?: string | null; // String
    upc?: string | null; // String
  }
  Query: {};
  Review: { // root type
    product?: NexusGenRootTypes['Product'] | null; // Product
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Product: { // field return type
    name: string | null; // String
    upc: string | null; // String
  }
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  Review: { // field return type
    product: NexusGenRootTypes['Product'] | null; // Product
  }
}

export interface NexusGenFieldTypeNames {
  Product: { // field return type name
    name: 'String'
    upc: 'String'
  }
  Query: { // field return type name
    test: 'Boolean'
  }
  Review: { // field return type name
    product: 'Product'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"provides\\"

export interface NexusGenDirectiveArgs {
  provides: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Annotates the expected returned fieldset from a field
     * on a base type that is guaranteed to be selectable by the
     * gateway. Given the following example:
     * \`\`\`ts
     * objectType({
     * name: 'Review',
     * keyFields: ['id'],
     * definition: (t) => {
     * t.field('product', { type: 'Product', provides: ['name'] });
     * },
     * });
     * objectType({
     * name: 'Product',
     * keyFields: ['upc'],
     * definition: (t) => {
     * t.string('upc', { external: true });
     * t.string('name', { external: true });
     * },
     * });
     * \`\`\`
     * When fetching \`Review.product\` from the Reviews service,
     * it is possible to request the name with the expectation that
     * the Reviews service can provide it when going from review to
     * product. \`Product.name\` is an external field on an external
     * type which is why the local type extension of \`Product\` and
     * annotation of \`name\` is required.
     * [Provides - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federated-types/federated-directives#provides)
     */
    provides?: FederationProvidesField<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;
