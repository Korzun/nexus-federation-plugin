// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inaccessible field configuration is NOT present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  test: Boolean
}

type User {
  email: String
  id: ID
  name: String
}"
`;

exports[`inaccessible field configuration is NOT present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationInaccessibleField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/field\\"
import type { FederationInaccessibleInputField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/input-field\\"
import type { FederationInaccessibleObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"inaccessible\\"

export interface NexusGenDirectiveArgs {
  inaccessible: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that an **object** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **object** to your remaining
     * subgraphs. You can remove the \`@inaccessible\` directive when the
     * rollout is complete and begin using the **object**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * inaccessible: true
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that a **field** within the schema is inaccessible. Inaccessible
     * elements are available to query at the subgraph level but are not
     * available to query at the supergraph level (through the router or
     * gateway). This directive enables you to preserve composition while
     * adding the **field** to your remaining subgraphs. You can remove the
     * \`@inaccessible\` directive when the rollout is complete and begin
     * using the **field**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true }); // inaccessible
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that an **input field** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **input field** to your
     * remaining subgraphs. You can remove the \`@inaccessible\` directive
     * when the rollout is complete and begin using the **input field**.
     * \`\`\`ts
     * inputObjectType({
     * name: 'CreateProductInput',
     * definition: (t) => {
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true });
     * },
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleInputField
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`inaccessible field configuration is present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  test: Boolean
}

type User {
  email: String @inaccessible
  id: ID
  name: String
}"
`;

exports[`inaccessible field configuration is present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationInaccessibleField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/field\\"
import type { FederationInaccessibleInputField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/input-field\\"
import type { FederationInaccessibleObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"inaccessible\\"

export interface NexusGenDirectiveArgs {
  inaccessible: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that an **object** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **object** to your remaining
     * subgraphs. You can remove the \`@inaccessible\` directive when the
     * rollout is complete and begin using the **object**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * inaccessible: true
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that a **field** within the schema is inaccessible. Inaccessible
     * elements are available to query at the subgraph level but are not
     * available to query at the supergraph level (through the router or
     * gateway). This directive enables you to preserve composition while
     * adding the **field** to your remaining subgraphs. You can remove the
     * \`@inaccessible\` directive when the rollout is complete and begin
     * using the **field**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true }); // inaccessible
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that an **input field** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **input field** to your
     * remaining subgraphs. You can remove the \`@inaccessible\` directive
     * when the rollout is complete and begin using the **input field**.
     * \`\`\`ts
     * inputObjectType({
     * name: 'CreateProductInput',
     * definition: (t) => {
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true });
     * },
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleInputField
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`inaccessible input field configuration is NOT present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  test: Boolean
}

input User {
  email: String
  id: ID
  name: String
}"
`;

exports[`inaccessible input field configuration is NOT present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationInaccessibleField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/field\\"
import type { FederationInaccessibleInputField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/input-field\\"
import type { FederationInaccessibleObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  User: { // input type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"inaccessible\\"

export interface NexusGenDirectiveArgs {
  inaccessible: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that an **object** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **object** to your remaining
     * subgraphs. You can remove the \`@inaccessible\` directive when the
     * rollout is complete and begin using the **object**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * inaccessible: true
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that a **field** within the schema is inaccessible. Inaccessible
     * elements are available to query at the subgraph level but are not
     * available to query at the supergraph level (through the router or
     * gateway). This directive enables you to preserve composition while
     * adding the **field** to your remaining subgraphs. You can remove the
     * \`@inaccessible\` directive when the rollout is complete and begin
     * using the **field**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true }); // inaccessible
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that an **input field** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **input field** to your
     * remaining subgraphs. You can remove the \`@inaccessible\` directive
     * when the rollout is complete and begin using the **input field**.
     * \`\`\`ts
     * inputObjectType({
     * name: 'CreateProductInput',
     * definition: (t) => {
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true });
     * },
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleInputField
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`inaccessible input field configuration is present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  test: Boolean
}

input User {
  email: String @inaccessible
  id: ID
  name: String
}"
`;

exports[`inaccessible input field configuration is present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationInaccessibleField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/field\\"
import type { FederationInaccessibleInputField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/input-field\\"
import type { FederationInaccessibleObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  User: { // input type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"inaccessible\\"

export interface NexusGenDirectiveArgs {
  inaccessible: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that an **object** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **object** to your remaining
     * subgraphs. You can remove the \`@inaccessible\` directive when the
     * rollout is complete and begin using the **object**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * inaccessible: true
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that a **field** within the schema is inaccessible. Inaccessible
     * elements are available to query at the subgraph level but are not
     * available to query at the supergraph level (through the router or
     * gateway). This directive enables you to preserve composition while
     * adding the **field** to your remaining subgraphs. You can remove the
     * \`@inaccessible\` directive when the rollout is complete and begin
     * using the **field**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true }); // inaccessible
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that an **input field** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **input field** to your
     * remaining subgraphs. You can remove the \`@inaccessible\` directive
     * when the rollout is complete and begin using the **input field**.
     * \`\`\`ts
     * inputObjectType({
     * name: 'CreateProductInput',
     * definition: (t) => {
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true });
     * },
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleInputField
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`inaccessible is correctly added to schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  test: Boolean
}"
`;

exports[`inaccessible is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationInaccessibleField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/field\\"
import type { FederationInaccessibleInputField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/input-field\\"
import type { FederationInaccessibleObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"inaccessible\\"

export interface NexusGenDirectiveArgs {
  inaccessible: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that an **object** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **object** to your remaining
     * subgraphs. You can remove the \`@inaccessible\` directive when the
     * rollout is complete and begin using the **object**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * inaccessible: true
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that a **field** within the schema is inaccessible. Inaccessible
     * elements are available to query at the subgraph level but are not
     * available to query at the supergraph level (through the router or
     * gateway). This directive enables you to preserve composition while
     * adding the **field** to your remaining subgraphs. You can remove the
     * \`@inaccessible\` directive when the rollout is complete and begin
     * using the **field**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true }); // inaccessible
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that an **input field** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **input field** to your
     * remaining subgraphs. You can remove the \`@inaccessible\` directive
     * when the rollout is complete and begin using the **input field**.
     * \`\`\`ts
     * inputObjectType({
     * name: 'CreateProductInput',
     * definition: (t) => {
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true });
     * },
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleInputField
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`inaccessible object configuration is NOT present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  test: Boolean
}

type User {
  email: String
  id: ID
  name: String
}"
`;

exports[`inaccessible object configuration is NOT present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationInaccessibleField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/field\\"
import type { FederationInaccessibleInputField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/input-field\\"
import type { FederationInaccessibleObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"inaccessible\\"

export interface NexusGenDirectiveArgs {
  inaccessible: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that an **object** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **object** to your remaining
     * subgraphs. You can remove the \`@inaccessible\` directive when the
     * rollout is complete and begin using the **object**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * inaccessible: true
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that a **field** within the schema is inaccessible. Inaccessible
     * elements are available to query at the subgraph level but are not
     * available to query at the supergraph level (through the router or
     * gateway). This directive enables you to preserve composition while
     * adding the **field** to your remaining subgraphs. You can remove the
     * \`@inaccessible\` directive when the rollout is complete and begin
     * using the **field**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true }); // inaccessible
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that an **input field** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **input field** to your
     * remaining subgraphs. You can remove the \`@inaccessible\` directive
     * when the rollout is complete and begin using the **input field**.
     * \`\`\`ts
     * inputObjectType({
     * name: 'CreateProductInput',
     * definition: (t) => {
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true });
     * },
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleInputField
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`inaccessible object configuration is present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  test: Boolean
}

type User @inaccessible {
  email: String
  id: ID
  name: String
}"
`;

exports[`inaccessible object configuration is present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationInaccessibleField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/field\\"
import type { FederationInaccessibleInputField } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/input-field\\"
import type { FederationInaccessibleObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/inaccessible/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"inaccessible\\"

export interface NexusGenDirectiveArgs {
  inaccessible: {
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates that an **object** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **object** to your remaining
     * subgraphs. You can remove the \`@inaccessible\` directive when the
     * rollout is complete and begin using the **object**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * inaccessible: true
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleObject
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that a **field** within the schema is inaccessible. Inaccessible
     * elements are available to query at the subgraph level but are not
     * available to query at the supergraph level (through the router or
     * gateway). This directive enables you to preserve composition while
     * adding the **field** to your remaining subgraphs. You can remove the
     * \`@inaccessible\` directive when the rollout is complete and begin
     * using the **field**.
     * \`\`\`ts
     * objectType({
     * name: 'Product',
     * definition: (t) =>
     * {
     * t.id('id');
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true }); // inaccessible
     * }
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleField
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Indicates that an **input field** within the schema is inaccessible.
     * Inaccessible elements are available to query at the subgraph
     * level but are not available to query at the supergraph level
     * (through the router or gateway). This directive enables you
     * to preserve composition while adding the **input field** to your
     * remaining subgraphs. You can remove the \`@inaccessible\` directive
     * when the rollout is complete and begin using the **input field**.
     * \`\`\`ts
     * inputObjectType({
     * name: 'CreateProductInput',
     * definition: (t) => {
     * t.nullable.string('sku');
     * t.nullable.string('package');
     * t.nullable.field('createdBy', { type: 'User' });
     * t.nullable.string('hidden', { inaccessible: true });
     * },
     * });
     * \`\`\`
     * [Inaccessible - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#inaccessible)
     */
    inaccessible?: FederationInaccessibleInputField
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;
