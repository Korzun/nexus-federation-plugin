// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`keys \`enableKeyOnInterface\` configured to \`false\` is added to schema only allowing \`OBJECT\` 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#key

      Indicates a combination of fields that can be used
      to uniquely identify and fetch an object or interface.
    
\\"\\"\\"
directive @key(fields: _FieldSet!) repeatable on OBJECT

type Query {
  test: Boolean
}

\\"\\"\\"

  Represents a set of fields. Grammatically, a field set
  is a selection set minus the braces. This means it can
  represent a single field \\"upc\\", multiple fields \\"id
  countryCode\\", and even nested selection sets \\"id organization
  { id }\\".
  
  [FieldSet - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#scalar-fieldset)
  
\\"\\"\\"
scalar _FieldSet"
`;

exports[`keys \`enableKeyOnInterface\` configured to \`false\` is added to types only allowing \`OBJECT\` 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationKeysObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/keys/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"key\\"

export interface NexusGenDirectiveArgs {
  key: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates a combination of fields that can be used to
     * uniquely identify and fetch an object or interface.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * keys: ['id'],
     * definition(t) {
     * t.id('id');
     * t.string('name');
     * },
     * });
     * \`\`\`
     * [Key - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#key)
     */
    keys?: FederationKeysObject<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`keys \`enableKeyOnInterface\` configured to \`true\` is added to schema allowing \`OBJECT\` and \`INTERFACE\` 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#key

      Indicates a combination of fields that can be used
      to uniquely identify and fetch an object or interface.
    
\\"\\"\\"
directive @key(fields: _FieldSet!) repeatable on INTERFACE | OBJECT

type Query {
  test: Boolean
}

\\"\\"\\"

  Represents a set of fields. Grammatically, a field set
  is a selection set minus the braces. This means it can
  represent a single field \\"upc\\", multiple fields \\"id
  countryCode\\", and even nested selection sets \\"id organization
  { id }\\".
  
  [FieldSet - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#scalar-fieldset)
  
\\"\\"\\"
scalar _FieldSet"
`;

exports[`keys \`enableKeyOnInterface\` configured to \`true\` is added to types allowing \`OBJECT\` and \`INTERFACE\` 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationKeysObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/keys/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"key\\"

export interface NexusGenDirectiveArgs {
  key: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates a combination of fields that can be used to
     * uniquely identify and fetch an object or interface.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * keys: ['id'],
     * definition(t) {
     * t.id('id');
     * t.string('name');
     * },
     * });
     * \`\`\`
     * [Key - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#key)
     */
    keys?: FederationKeysObject<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`keys \`prefixFieldset\` configured to \`false\` is added to schema with fields type as \`FieldSet\` 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#key

      Indicates a combination of fields that can be used
      to uniquely identify and fetch an object or interface.
    
\\"\\"\\"
directive @key(fields: FieldSet!) repeatable on OBJECT

\\"\\"\\"

  Represents a set of fields. Grammatically, a field set
  is a selection set minus the braces. This means it can
  represent a single field \\"upc\\", multiple fields \\"id
  countryCode\\", and even nested selection sets \\"id organization
  { id }\\".
  
  [FieldSet - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#scalar-fieldset)
  
\\"\\"\\"
scalar FieldSet

type Query {
  test: Boolean
}"
`;

exports[`keys \`prefixFieldset\` configured to \`false\` is added to types with fields type as \`FieldSet\` 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationKeysObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/keys/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"key\\"

export interface NexusGenDirectiveArgs {
  key: {
    fields:NexusGenScalars['FieldSet']; // FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates a combination of fields that can be used to
     * uniquely identify and fetch an object or interface.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * keys: ['id'],
     * definition(t) {
     * t.id('id');
     * t.string('name');
     * },
     * });
     * \`\`\`
     * [Key - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#key)
     */
    keys?: FederationKeysObject<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`keys \`prefixFieldset\` configured to \`true\` is added to schema with fields type as \`_FieldSet\` 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#key

      Indicates a combination of fields that can be used
      to uniquely identify and fetch an object or interface.
    
\\"\\"\\"
directive @key(fields: _FieldSet!) repeatable on OBJECT

type Query {
  test: Boolean
}

\\"\\"\\"

  Represents a set of fields. Grammatically, a field set
  is a selection set minus the braces. This means it can
  represent a single field \\"upc\\", multiple fields \\"id
  countryCode\\", and even nested selection sets \\"id organization
  { id }\\".
  
  [FieldSet - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#scalar-fieldset)
  
\\"\\"\\"
scalar _FieldSet"
`;

exports[`keys \`prefixFieldset\` configured to \`true\` is added to types with fields type as \`_FieldSet\` 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationKeysObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/keys/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"key\\"

export interface NexusGenDirectiveArgs {
  key: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates a combination of fields that can be used to
     * uniquely identify and fetch an object or interface.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * keys: ['id'],
     * definition(t) {
     * t.id('id');
     * t.string('name');
     * },
     * });
     * \`\`\`
     * [Key - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#key)
     */
    keys?: FederationKeysObject<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`keys default config is added to schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#key

      Indicates a combination of fields that can be used
      to uniquely identify and fetch an object or interface.
    
\\"\\"\\"
directive @key(fields: _FieldSet!) repeatable on OBJECT

type Query {
  test: Boolean
}

\\"\\"\\"

  Represents a set of fields. Grammatically, a field set
  is a selection set minus the braces. This means it can
  represent a single field \\"upc\\", multiple fields \\"id
  countryCode\\", and even nested selection sets \\"id organization
  { id }\\".
  
  [FieldSet - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#scalar-fieldset)
  
\\"\\"\\"
scalar _FieldSet"
`;

exports[`keys default config is added to types 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationKeysObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/keys/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"key\\"

export interface NexusGenDirectiveArgs {
  key: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates a combination of fields that can be used to
     * uniquely identify and fetch an object or interface.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * keys: ['id'],
     * definition(t) {
     * t.id('id');
     * t.string('name');
     * },
     * });
     * \`\`\`
     * [Key - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#key)
     */
    keys?: FederationKeysObject<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`keys object configuration is NOT present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#key

      Indicates a combination of fields that can be used
      to uniquely identify and fetch an object or interface.
    
\\"\\"\\"
directive @key(fields: _FieldSet!) repeatable on OBJECT

type Query {
  test: Boolean
}

type User {
  email: String
  id: ID
  name: String
}

\\"\\"\\"

  Represents a set of fields. Grammatically, a field set
  is a selection set minus the braces. This means it can
  represent a single field \\"upc\\", multiple fields \\"id
  countryCode\\", and even nested selection sets \\"id organization
  { id }\\".
  
  [FieldSet - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#scalar-fieldset)
  
\\"\\"\\"
scalar _FieldSet"
`;

exports[`keys object configuration is NOT present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationKeysObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/keys/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"key\\"

export interface NexusGenDirectiveArgs {
  key: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates a combination of fields that can be used to
     * uniquely identify and fetch an object or interface.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * keys: ['id'],
     * definition(t) {
     * t.id('id');
     * t.string('name');
     * },
     * });
     * \`\`\`
     * [Key - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#key)
     */
    keys?: FederationKeysObject<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;

exports[`keys object configuration is present is correctly added to the schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


\\"\\"\\"

      **Apollo Federation 2.0 Subgraph**
      https://www.apollographql.com/docs/federation/federation-spec/#key

      Indicates a combination of fields that can be used
      to uniquely identify and fetch an object or interface.
    
\\"\\"\\"
directive @key(fields: _FieldSet!) repeatable on OBJECT

type Query {
  test: Boolean
}

type User @key(fields: \\"id email\\") {
  email: String
  id: ID
  name: String
}

\\"\\"\\"

  Represents a set of fields. Grammatically, a field set
  is a selection set minus the braces. This means it can
  represent a single field \\"upc\\", multiple fields \\"id
  countryCode\\", and even nested selection sets \\"id organization
  { id }\\".
  
  [FieldSet - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#scalar-fieldset)
  
\\"\\"\\"
scalar _FieldSet"
`;

exports[`keys object configuration is present is correctly added to typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FederationKeysObject } from \\"@korzun/nexus-federation-plugin/dist/esm/type/keys/object\\"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  _FieldSet: any
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    test: boolean | null; // Boolean
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    test: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenDirectives = \\"key\\"

export interface NexusGenDirectiveArgs {
  key: {
    fields:NexusGenScalars['_FieldSet']; // _FieldSet!
  }
}

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    __typename: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  directives: NexusGenDirectives;
  directiveArgs: NexusGenDirectiveArgs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Indicates a combination of fields that can be used to
     * uniquely identify and fetch an object or interface.
     * \`\`\`ts
     * objectType({
     * name: 'User',
     * keys: ['id'],
     * definition(t) {
     * t.id('id');
     * t.string('name');
     * },
     * });
     * \`\`\`
     * [Key - Apollo Federation 2.0 Subgraph Spec](https://www.apollographql.com/docs/federation/federation-spec/#key)
     */
    keys?: FederationKeysObject<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    
  }
}"
`;
